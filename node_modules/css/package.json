{
  "name": "css",
  "version": "2.1.0",
  "description": "CSS parser / stringifier",
  "main": "index",
  "files": [
    "index.js",
    "lib"
  ],
  "dependencies": {
    "source-map": "^0.1.38",
    "source-map-resolve": "^0.3.0",
    "urix": "^0.1.0",
    "inherits": "^2.0.1"
  },
  "devDependencies": {
    "mocha": "^1.21.3",
    "should": "^4.0.4",
    "matcha": "^0.5.0",
    "bytes": "^1.0.0"
  },
  "scripts": {
    "benchmark": "matcha",
    "test": "mocha --require should --reporter spec --bail test/*.js"
  },
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/reworkcss/css.git"
  },
  "keywords": [
    "css",
    "parser",
    "stringifier",
    "stylesheet"
  ],
  "readme": "# css [![Build Status](https://travis-ci.org/reworkcss/css.svg?branch=master)](https://travis-ci.org/reworkcss/css)\r\n\r\nCSS parser / stringifier.\r\n\r\n## Installation\r\n\r\n    $ npm install css\r\n\r\n## Usage\r\n\r\n```js\r\nvar css = require('css');\r\nvar obj = css.parse('body { font-size: 12px; }', options);\r\ncss.stringify(obj, options);\r\n```\r\n\r\n## API\r\n\r\n### css.parse(code, [options])\r\n\r\nAccepts a CSS string and returns an AST `object`.\r\n\r\n`options`:\r\n\r\n- silent: silently fail on parse errors.\r\n- source: the path to the file containing `css`. Makes errors and source\r\n  maps more helpful, by letting them know where code comes from.\r\n\r\n### css.stringify(object, [options])\r\n\r\nAccepts an AST `object` (as `css.parse` produces) and returns a CSS string.\r\n\r\n`options`:\r\n\r\n- compress: omit comments and extraneous whitespace.\r\n- sourcemap: return a sourcemap along with the CSS output. Using the `source`\r\n  option of `css.parse` is strongly recommended when creating a source map.\r\n  Specify `sourcemap: 'generator'` to return the SourceMapGenerator object\r\n  instead of serializing the source map.\r\n- inputSourcemaps: (enabled by default, specify `false` to disable) reads any\r\n  source maps referenced by the input files when generating the output source\r\n  map. When enabled, file system access may be required for reading the\r\n  referenced source maps.\r\n\r\n### Example\r\n\r\n```js\r\nvar ast = css.parse('body { font-size: 12px; }', { source: 'source.css' });\r\n\r\nvar css = css.stringify(ast);\r\n\r\nvar result = css.stringify(ast, { sourcemap: true });\r\nresult.code // string with CSS\r\nresult.map // source map object\r\n```\r\n\r\n### Errors\r\n\r\nErrors will have `error.position`, just like [`node.position`](#position). The\r\nerror contains the source position in the message. To get the error message\r\nwithout the position use `error.reason`.\r\n\r\nIf you create any errors in plugins such as in\r\n[rework](https://github.com/reworkcss/rework), you __must__ set the `position`\r\nas well for consistency.\r\n\r\n## AST\r\n\r\n### Common properties\r\n\r\nAll nodes have the following properties.\r\n\r\n#### position\r\n\r\nInformation about the position in the source string that corresponds to\r\nthe node.\r\n\r\n`Object`:\r\n\r\n- start: `Object`:\r\n  - line: `Number`.\r\n  - column: `Number`.\r\n- end: `Object`:\r\n  - line: `Number`.\r\n  - column: `Number`.\r\n- source: `String` or `undefined`. The value of `options.source` if passed to\r\n  `css.parse`. Otherwise `undefined`.\r\n- content: `String`. The full source string passed to `css.parse`.\r\n\r\nThe line and column numbers are 1-based: The first line is 1 and the first\r\ncolumn of a line is 1 (not 0).\r\n\r\nThe `position` property lets you know from which source file the node comes\r\nfrom (if available), what that file contains, and what part of that file was\r\nparsed into the node.\r\n\r\n#### type\r\n\r\n`String`. The possible values are the ones listed in the Types section below.\r\n\r\n#### parent\r\n\r\nA reference to the parent node, or `null` if the node has no parent.\r\n\r\n### Types\r\n\r\nThe available values of `node.type` are listed below, as well as the available\r\nproperties of each node (other than the common properties listed above.)\r\n\r\n#### stylesheet\r\n\r\nThe root node returned by `css.parse`.\r\n\r\n- stylesheet: `Object`:\r\n  - rules: `Array` of nodes with the types `rule`, `comment` and any of the\r\n    at-rule types.\r\n\r\n#### rule\r\n\r\n- selectors: `Array` of `String`s. The list of selectors of the rule, split\r\n  on commas. Each selector is trimmed from whitespace and comments.\r\n- declarations: `Array` of nodes with the types `declaration` and `comment`.\r\n\r\n#### declaration\r\n\r\n- property: `String`. The property name, trimmed from whitespace and\r\n  comments. May not be empty.\r\n- value: `String`. The value of the property, trimmed from whitespace and\r\n  comments. Empty values are allowed.\r\n\r\n#### comment\r\n\r\nA rule-level or declaration-level comment. Comments inside selectors,\r\nproperties and values etc. are lost.\r\n\r\n- comment: `String`. The part between the starting `/*` and the ending `*/`\r\n  of the comment, including whitespace.\r\n\r\n#### charset\r\n\r\nThe `@charset` at-rule.\r\n\r\n- charset: `String`. The part following `@charset `.\r\n\r\n#### custom-media\r\n\r\nThe `@custom-media` at-rule.\r\n\r\n- name: `String`. The `--`-prefixed name.\r\n- media: `String`. The part following the name.\r\n\r\n#### document\r\n\r\nThe `@document` at-rule.\r\n\r\n- document: `String`. The part following `@document `.\r\n- vendor: `String` or `undefined`. The vendor prefix in `@document`, or\r\n  `undefined` if there is none.\r\n- rules: `Array` of nodes with the types `rule`, `comment` and any of the\r\n  at-rule types.\r\n\r\n#### font-face\r\n\r\nThe `@font-face` at-rule.\r\n\r\n- declarations: `Array` of nodes with the types `declaration` and `comment`.\r\n\r\n#### host\r\n\r\nThe `@host` at-rule.\r\n\r\n- rules: `Array` of nodes with the types `rule`, `comment` and any of the\r\n  at-rule types.\r\n\r\n#### import\r\n\r\nThe `@import` at-rule.\r\n\r\n- import: `String`. The part following `@import `.\r\n\r\n#### keyframes\r\n\r\nThe `@keyframes` at-rule.\r\n\r\n- name: `String`. The name of the keyframes rule.\r\n- vendor: `String` or `undefined`. The vendor prefix in `@keyframes`, or\r\n  `undefined` if there is none.\r\n- keyframes: `Array` of nodes with the types `keyframe` and `comment`.\r\n\r\n#### keyframe\r\n\r\n- values: `Array` of `String`s. The list of “selectors” of the keyframe rule,\r\n  split on commas. Each “selector” is trimmed from whitespace.\r\n- declarations: `Array` of nodes with the types `declaration` and `comment`.\r\n\r\n#### media\r\n\r\nThe `@media` at-rule.\r\n\r\n- media: `String`. The part following `@media `.\r\n- rules: `Array` of nodes with the types `rule`, `comment` and any of the\r\n  at-rule types.\r\n\r\n#### namespace\r\n\r\nThe `@namespace` at-rule.\r\n\r\n- namespace: `String`. The part following `@namespace `.\r\n\r\n#### page\r\n\r\nThe `@page` at-rule.\r\n\r\n- selectors: `Array` of `String`s. The list of selectors of the rule, split\r\n  on commas. Each selector is trimmed from whitespace and comments.\r\n- declarations: `Array` of nodes with the types `declaration` and `comment`.\r\n\r\n#### supports\r\n\r\nThe `@supports` at-rule.\r\n\r\n- supports: `String`. The part following `@supports `.\r\n- rules: `Array` of nodes with the types `rule`, `comment` and any of the\r\n  at-rule types.\r\n\r\n### Example\r\n\r\nCSS:\r\n\r\n```css\r\nbody {\r\n  background: #eee;\r\n  color: #888;\r\n}\r\n```\r\n\r\nParse tree:\r\n\r\n```json\r\n{\r\n  \"type\": \"stylesheet\",\r\n  \"stylesheet\": {\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"rule\",\r\n        \"selectors\": [\r\n          \"body\"\r\n        ],\r\n        \"declarations\": [\r\n          {\r\n            \"type\": \"declaration\",\r\n            \"property\": \"background\",\r\n            \"value\": \"#eee\",\r\n            \"position\": {\r\n              \"start\": {\r\n                \"line\": 2,\r\n                \"column\": 3\r\n              },\r\n              \"end\": {\r\n                \"line\": 2,\r\n                \"column\": 19\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"declaration\",\r\n            \"property\": \"color\",\r\n            \"value\": \"#888\",\r\n            \"position\": {\r\n              \"start\": {\r\n                \"line\": 3,\r\n                \"column\": 3\r\n              },\r\n              \"end\": {\r\n                \"line\": 3,\r\n                \"column\": 14\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        \"position\": {\r\n          \"start\": {\r\n            \"line\": 1,\r\n            \"column\": 1\r\n          },\r\n          \"end\": {\r\n            \"line\": 4,\r\n            \"column\": 2\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/reworkcss/css/issues"
  },
  "homepage": "https://github.com/reworkcss/css",
  "_id": "css@2.1.0",
  "dist": {
    "shasum": "60cd4977c2fde33e9ca5876105348f213ef08ae9"
  },
  "_resolved": "git://github.com/reworkcss/css#1854d0c885a6037e4974a34b9c023a099ada0ede",
  "_from": "css@git://github.com/reworkcss/css"
}
